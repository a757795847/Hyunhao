<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd

        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd">
    <context:component-scan base-package="com.zy.gcode.dao,com.zy.gcode.service,com.zy.gcode.cache"></context:component-scan>
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <property name="driverClass" value="com.mysql.jdbc.Driver"/>
        <property name="jdbcUrl" value="jdbc:mysql://115.29.188.190:3306/jt_platform?characterEncoding=utf8&amp;rewriteBatchedStatements=true"/>
        <property name="user" value="jt_dev"></property>
        <property name="password" value="*+YC!X+mLz%C(fA="></property>
        <property name="idleConnectionTestPeriod" value="2000"></property>
        <property name="maxPoolSize" value="20"/>
    </bean>
    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean" lazy-init="false">
        <!-- 注入datasource，给sessionfactoryBean内setdatasource提供数据源 -->
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:hibernate.cfg.xml"></property>
        <!-- //加载实体类的映射文件位置及名称 -->
        <property name="mappingLocations" value="classpath:hbm/*.hbm.xml"></property>
    </bean>

    <bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>


    <bean id="jedisPool" class="com.zy.gcode.cache.JedisPoolFactoryBean">
    </bean>


    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="8" />
        <property name="testOnBorrow" value="true" />
    </bean>

    <bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="hostName" value="localhost"></property>
        <property name="port" value="6388"></property>
        <property name="password" value="foobared123456"></property>
    </bean>

    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory"   ref="connectionFactory" />
    </bean>
    <tx:annotation-driven proxy-target-class="true" transaction-manager="transactionManager"/>
    <bean name="passwordService" class="org.apache.shiro.authc.credential.DefaultPasswordService">
        <property name="hashService">
            <bean class="org.apache.shiro.crypto.hash.DefaultHashService">
                <property name="hashIterations" value="2"/>
                <property name="hashAlgorithmName" value="md5"/>
                <property name="generatePublicSalt" value="true"/>
            </bean>
        </property>
    </bean>

    <bean name="passwordMatcher" class="org.apache.shiro.authc.credential.PasswordMatcher">
        <property name="passwordService" ref="passwordService"/>
    </bean>

    <bean id="zyRealm" class="com.zy.gcode.security.ZyRealm">
        <property name="credentialsMatcher" ref="passwordMatcher"/>
        <property name="userService" ref="userService"/>
    </bean>


    <!-- 安全管理器 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realms">
            <list>
                <ref bean="zyRealm"/>
            </list>
        </property>
        <property name="subjectDAO">
            <bean class="com.zy.gcode.security.UnSuportsSubjectDAO"/>
        </property>
        <property name="subjectFactory">
            <bean class="com.zy.gcode.security.JwtSubjectFactory"/>
        </property>
    </bean>

    <!-- 定义CacheManager -->
    <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
        <!-- 指定配置文件的位置 -->
        <property name="configLocation" value="classpath:ehcache.xml"/>
        <!-- 指定新建的CacheManager的名称 -->
        <property name="cacheManagerName" value="zyCacheManager"/>
    </bean>

    <bean name="userCache" class="org.springframework.cache.ehcache.EhCacheCache">
        <constructor-arg>
            <bean id="userCache" class="org.springframework.cache.ehcache.EhCacheFactoryBean">
                <property name="cacheName" value="user"/>
                <property name="cacheManager" ref="cacheManager"/>
            </bean>
        </constructor-arg>
    </bean>



    <!-- 相当于调用SecurityUtils.setSecurityManager(securityManager) -->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod"
                  value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
        <property name="arguments" ref="securityManager"/>
    </bean>
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod"
                  value="com.zy.gcode.utils.SubjectUtils.setUserCache"/>
        <property name="arguments" ref="userCache"/>
    </bean>
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod"
                  value="com.zy.gcode.utils.SubjectUtils.setUserService"/>
        <property name="arguments" ref="userService"/>
    </bean>
    <!-- Shiro生命周期处理器-->
    <bean id="lifecycleBeanPostProcessor"
          class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <bean id="userFilter"
          class="com.zy.gcode.filter.JwtHttpAuthenticationFilter">
        <property name="loginUrl" value="/auth/login"/>
    </bean>
    <bean id="roleFilter" class="org.apache.shiro.web.filter.authz.RolesAuthorizationFilter">
        <property name="loginUrl" value="/login"/>
        <property name="unauthorizedUrl" value="/unAuthorization"/>
    </bean>
    <bean id="anonymousFilter" class="com.zy.gcode.filter.JwtAnonymousFilter"/>
    <bean id="openIdFilter" class="com.zy.gcode.filter.OpenIdFilter">
    </bean>
    <!-- Shiro的Web过滤器 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="/login.jsp"/>
        <property name="filters">
            <map>
                <entry key="authe" value-ref="userFilter"/>
                <entry key="anon" value-ref="anonymousFilter"/>
                <entry key="role" value-ref="roleFilter"/>
                <entry key="openid" value-ref="openIdFilter"/>
            </map>
        </property>
        <property name="filterChainDefinitions">
            <value>
                /auth/receive=anon
                /*/receive=anon
                /auth/**=authe
                /pay/qr=authe
                /app/**=authe
                /order/**=authe
                /wechat/**=openid
                /**=anon
            </value>
        </property>
    </bean>
</beans>